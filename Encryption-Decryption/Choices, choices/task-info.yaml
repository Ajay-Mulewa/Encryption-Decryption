type: edu
custom_name: stage6
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.*;
    import java.nio.file.*;
    import java.util.*;

    public class Main {
        public static void main(String[] args) throws Exception {
            String operation = "enc";
            String inputText = "";
            int key = 0;
            String inputPath = "";
            String outputPath = "";

            for (int i = 0; i < args.length; i += 2) {
                if ("-mode".equals(args[i])) {
                    operation = args[i + 1];
                } else if ("-key".equals(args[i])) {
                    key = Integer.parseInt(args[i + 1]);
                } else if ("-data".equals(args[i])) {
                    inputText = args[i + 1];
                } else if ("-in".equals(args[i])) {
                    inputPath = args[i + 1];
                } else if ("-out".equals(args[i])) {
                    outputPath = args[i + 1];
                }
            }
            fileEnc(operation, inputPath, outputPath, key, inputText);
        }

        public static void caesarCipher(String input, String operation, int key) {
            StringBuilder normalText = new StringBuilder();

            int finalPosition = 0;
            for (char ele : input.toCharArray()) {
                if ("dec".equals(operation)) {
                    finalPosition = (int) ele - key;
                } else {
                    finalPosition = (int) ele + key;
                }
                char set = (char) finalPosition;
                normalText.append(set);
            }
            System.out.println(normalText);
        }

        public static void fileEnc(String mode, String inputPath, String outputPath, int key, String data) throws Exception {
    //        StringBuilder addToFile = new StringBuilder();
            if (Objects.equals(inputPath, "") && Objects.equals(outputPath, "")) {
                caesarCipher(data, mode, key);
            } else if (inputPath != "" && outputPath == "") {
                String input = readFileAsString(inputPath);
                caesarCipher(input, mode, key);
            } else {
                try {
                    File file = new File(outputPath);
                    FileWriter fr = new FileWriter(file);
                    String inputData = readFileAsString(inputPath);
                    StringBuilder cahr = new StringBuilder();
                    int finalPosition = 0;
                    for (char ele : inputData.toCharArray()) {
                        if ("enc".equals(mode)) {
                            finalPosition = (int) ele + key;
                        } else {
                            finalPosition = (int) ele - key;
                        }
                        char set = (char) finalPosition;
                        cahr.append(set);
                    }
                    fr.write(String.valueOf(cahr));
                } catch (IOException e) {
                    System.out.println("Error");
                }
            }
        }

        public static String readFileAsString(String fileName)throws Exception
        {
            String data = "";
            data = new String(Files.readAllBytes(Paths.get(fileName)));
            return data;
        }
    }
  learner_created: false
- name: output.txt
  visible: true
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/algorithm/Algorithm.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/algorithm/ShiftAlgo.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/algorithm/UnicodeAlgo.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/impl/AlgorithmFactory.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/impl/Strategy.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/resourceUtils/FileUtils.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/impl/Controller.java
  visible: true
  learner_created: true
- name: src/encryptdecrypt/resourceUtils/IOhandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5392#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 17 Sep 2022 14:33:14 UTC
record: 6
